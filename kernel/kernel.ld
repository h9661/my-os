/* ============================================================================
 * 커널 링커 스크립트 (Kernel Linker Script)
 * ============================================================================
 * 파일: kernel.ld
 * 역할: 1) 커널 바이너리 메모리 레이아웃 정의 2) 섹션 배치 규칙 설정 
 *       3) 물리 주소 매핑 4) 페이지 정렬 보장
 * 
 * 이 링커 스크립트는 커널의 각 섹션(.text, .data, .bss 등)을 메모리의 
 * 특정 위치에 배치하고, 부트로더와의 인터페이스를 정의함
 */

/* === 1. 진입점 정의 (Entry Point Definition) === */
/* _start: 커널이 실행을 시작할 함수의 심볼명
 * 부트로더가 커널을 로드한 후 점프할 첫 번째 명령어의 위치
 * kernel_entry.asm에서 정의된 _start 레이블과 연결됨 */
ENTRY(_start)

/* === 2. 출력 형식 및 아키텍처 설정 === */
/* ELF32 형식으로 바이너리 생성 (32비트 실행 파일 형식)
 * i386: Intel 80386 이상의 32비트 x86 아키텍처 대상 */
OUTPUT_FORMAT(elf32-i386)
OUTPUT_ARCH(i386)

/* === 3. 메모리 섹션 레이아웃 정의 === */
SECTIONS
{
    /* === 커널 로드 주소 설정 === */
    /* 0x1000 (4KB): 커널이 메모리에 로드될 물리 주소
     * 이 주소는 부트로더(bootloader.asm)에서 설정한 KERNEL_OFFSET과 일치해야 함
     * 
     * 메모리 맵:
     * 0x0000-0x7BFF: 사용 가능한 저메모리 (약 31KB)
     * 0x7C00-0x7DFF: 부트로더 코드 (512 bytes, BIOS가 로드)
     * 0x1000-????: 커널 코드 및 데이터 (이 스크립트가 정의)
     */
    . = 0x1000;

    /* === 4-1. 코드 섹션 (.text) === */
    /* 실행 가능한 기계어 코드가 저장되는 섹션
     * BLOCK(4K): 4KB(4096 bytes) 경계에서 시작하도록 블록 정렬
     * ALIGN(4K): 섹션 내용을 4KB 경계에 정렬 (메모리 보호와 성능 최적화)
     * *(.text): 모든 입력 파일의 .text 섹션을 이 위치에 배치 */
    .text BLOCK(4K) : ALIGN(4K)
    {
        *(.text)    /* kernel_entry.o, kernel.o 등의 .text 섹션 통합 */
    }

    /* === 4-2. 읽기 전용 데이터 섹션 (.rodata) === */
    /* 상수 데이터, 문자열 리터럴 등이 저장되는 섹션
     * 실행 시 수정할 수 없는 데이터 (Read-Only Data)
     * 예: printf에서 사용하는 문자열, const 변수들 */
    .rodata BLOCK(4K) : ALIGN(4K)
    {
        *(.rodata)  /* 모든 읽기 전용 데이터를 4KB 정렬하여 배치 */
    }

    /* === 4-3. 읽기/쓰기 데이터 섹션 (.data) === */
    /* 초기값이 있는 전역 변수들이 저장되는 섹션
     * 실행 시 읽기와 쓰기가 모두 가능한 데이터
     * 예: int global_var = 42; 같은 초기화된 전역 변수 */
    .data BLOCK(4K) : ALIGN(4K)
    {
        *(.data)    /* 모든 초기화된 데이터를 4KB 정렬하여 배치 */
    }

    /* === 4-4. 미초기화 데이터 섹션 (.bss) === */
    /* 초기값이 없는 전역 변수들을 위한 섹션
     * Block Started by Symbol의 줄임말
     * 실행 파일에는 공간만 예약되고 실제 데이터는 저장되지 않음
     * 프로그램 로드 시 0으로 초기화됨 */
    .bss BLOCK(4K) : ALIGN(4K)
    {
        /* COMMON: 여러 파일에서 동일한 이름으로 선언된 변수들
         * 링커가 하나로 통합하는 섹션 */
        *(COMMON)
        
        /* .bss: 일반적인 미초기화 변수들
         * 예: int uninitialized_array[1000]; */
        *(.bss)
    }
}

/* === 메모리 레이아웃 요약 ===
 * 
 * 물리 메모리 주소:
 * ┌─────────────────────────────────────────────────────────┐
 * │ 0x1000: .text (코드)                                   │
 * │ - _start 진입점                                         │  
 * │ - 모든 함수의 기계어 코드                               │
 * ├─────────────────────────────────────────────────────────┤
 * │ 0x2000: .rodata (읽기 전용 데이터)                      │
 * │ - 문자열 상수                                           │
 * │ - const 변수들                                          │
 * ├─────────────────────────────────────────────────────────┤
 * │ 0x3000: .data (초기화된 데이터)                         │
 * │ - 초기값 있는 전역 변수                                 │
 * ├─────────────────────────────────────────────────────────┤
 * │ 0x4000: .bss (미초기화 데이터)                          │
 * │ - 0으로 초기화될 전역 변수들                            │
 * │ - 스택은 0x90000에서 아래쪽으로 성장                    │
 * └─────────────────────────────────────────────────────────┘
 * 
 * 중요: 각 섹션은 4KB 경계에 정렬되어 있어 메모리 보호 기능을 
 * 활용할 수 있고, 캐시 성능도 최적화됨
 */
